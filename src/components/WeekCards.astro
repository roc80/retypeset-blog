---
import type { CollectionEntry } from 'astro:content'
import PostDate from '@/components/PostDate.astro'
import { getWeekPath } from '@/i18n/path'
import { getWeekDescription } from '@/utils/description'
import PinIcon from '@/assets/icons/pin-icon.svg'

type Week = CollectionEntry<'weeks'> & {
  remarkPluginFrontmatter: {
    minutes: number
  }
}

type Season = 'spring' | 'summer' | 'autumn' | 'winter'



const { weeksByYearAndSeason, pinnedWeeks = [] } = Astro.props

export interface Props {
  weeksByYearAndSeason: Map<number, Map<Season, Week[]>>
  pinnedWeeks?: Week[]
}

function getSeasonName(season: Season): string {
  const seasonNames = {
    spring: '春',
    summer: '夏',
    autumn: '秋',
    winter: '冬',
  }
  return seasonNames[season]
}

function getAllSeasons(): Season[] {
  return ['spring', 'summer', 'autumn', 'winter']
}

function getYearTotalWeeks(seasonMap: Map<Season, Week[]>): number {
  let total = 0
  seasonMap.forEach((weeks) => {
    total += weeks.length
  })
  return total
}

---

<!-- Pinned Weeks Section -->
{
  pinnedWeeks.length > 0 && (
    <section class="mb-7.5">
      <div class="uno-decorative-line" />
      <div class="mb-4">
        <h2 class="text-2xl font-bold text-primary mb-2">
          置顶周记
        </h2>
      </div>
      <ul>
        {pinnedWeeks.map((week) => {
          const slug = week.data.abbrlink || week.id.replace(/^.*\//, '')

          return (
            <li class="mb-5.5">
              {/* Week title */}
              <h3 class="inline transition-colors hover:c-primary">
                <a
                  class="cjk:tracking-0.02em font-medium text-4"
                  href={getWeekPath(slug)}
                  transition:name={`week-${slug}`}
                  data-disable-theme-transition
                >
                  {week.data.title}
                </a>
                {/* pinned icon */}
                <PinIcon
                  aria-hidden="true"
                  class="ml-0.25em inline-block aspect-square w-0.98em translate-y--0.1em lg:(w-1.05em translate-y--0.15em)"
                  fill="currentColor"
                />
              </h3>

              {/* mobile week time */}
              <div
                class="py-0.8 text-3.5 font-time lg:hidden"
                transition:name={`time-${slug}`}
                data-disable-theme-transition
              >
                <PostDate
                  date={week.data.pubDate}
                  minutes={week.remarkPluginFrontmatter.minutes}
                />
              </div>

              {/* desktop week time */}
              <div class="hidden text-3.65 font-time lg:(ml-2.5 inline)">
                <PostDate
                  date={week.data.pubDate}
                  minutes={week.remarkPluginFrontmatter.minutes}
                />
              </div>

              {/* desktop week description */}
              <div
                class="heti hidden"
                lg="mt-2.25 block"
              >
                <p>{getWeekDescription(week, 'list')}</p>
              </div>
            </li>
          )
        })}
      </ul>
    </section>
  )
}

<!-- Years Cards Section -->
<section class="space-y-6">
  {Array.from(weeksByYearAndSeason.entries()).map(([year, seasonMap]) => (
    <div class="year-card" data-year={year}>
      <!-- Year Card -->
      <div class="year-card-header cursor-pointer group">
        <div class="uno-decorative-line mb-4" />
        <div class="flex items-center justify-between mb-4">
          <div class="flex items-center gap-4">
            <h2 class="text-2xl font-bold text-primary group-hover:c-primary transition-colors">
              {year} 年
            </h2>
            <div class="text-secondary text-sm">
              共 {getYearTotalWeeks(seasonMap)} 篇周记
            </div>
          </div>
          <div class="text-secondary group-hover:c-primary transition-colors">
            <svg
              class="w-6 h-6 year-chevron"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </div>
        </div>
      </div>

      <!-- Season Cards (Collapsible) -->
      <div class="seasons-container max-h-0 overflow-hidden transition-all duration-300" data-expanded="false">
        <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
          {getAllSeasons().map((season) => {
            const seasonWeeks = seasonMap.get(season) || []
            const seasonName = getSeasonName(season)

            return (
              <div class="season-card" data-season={season} data-weeks-count={seasonWeeks.length}>
                <div class="season-card-header cursor-pointer group">
                  <div class="border border-secondary/25 rounded-lg p-4 hover:border-secondary/50 transition-all duration-200 hover:shadow-md">
                    <div class="flex items-center justify-between mb-2">
                      <h3 class="font-semibold text-lg group-hover:c-primary transition-colors">
                        {seasonName}
                      </h3>
                      <div class="text-secondary text-sm group-hover:c-primary transition-colors">
                        <svg
                          class="w-5 h-5 season-chevron"
                          fill="none"
                          stroke="currentColor"
                          viewBox="0 0 24 24"
                        >
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
                        </svg>
                      </div>
                    </div>
                    <div class="text-secondary text-sm mb-1">
                      {seasonWeeks.length} 篇
                    </div>
                  </div>
                </div>

                <!-- Weeks List (Collapsible) -->
                <div class="weeks-list max-h-0 overflow-hidden transition-all duration-300" data-expanded="false">
                  <div class="mt-2 space-y-2">
                    {seasonWeeks.map((week) => {
                      const slug = week.data.abbrlink || week.id.replace(/^.*\//, '')

                      return (
                        <a
                          href={getWeekPath(slug)}
                          transition:name={`week-${slug}`}
                          data-disable-theme-transition
                          class="week-item block p-3 bg-secondary/5 rounded-lg hover:bg-secondary/10 transition-all duration-200 hover:shadow-sm hover:scale-[1.02] transform group"
                        >
                          {/* Week title */}
                          <h4 class="cjk:tracking-0.02em font-medium text-3.5 transition-colors group-hover:c-primary">
                            {week.data.title}
                          </h4>

                          {/* week time */}
                          <div class="py-0.5 text-3 font-time">
                            <PostDate
                              date={week.data.pubDate}
                              minutes={week.remarkPluginFrontmatter.minutes}
                            />
                          </div>

                          {/* week description */}
                          {week.data.description && (
                            <div class="heti mt-1">
                              <p class="text-secondary text-sm line-clamp-2">{getWeekDescription(week, 'list')}</p>
                            </div>
                          )}
                        </a>
                      )
                    })}
                  </div>
                </div>
              </div>
            )}
          )}
        </div>
      </div>
    </div>
  ))}
</section>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .year-card[data-expanded="true"] .year-chevron {
    transform: rotate(90deg);
  }

  .season-card[data-expanded="true"] .season-chevron {
    transform: rotate(90deg);
  }

  .seasons-container[data-expanded="true"] {
    max-height: 2000px;
  }

  .weeks-list[data-expanded="true"] {
    max-height: 1000px;
  }

  .year-chevron {
    transition: transform 0.2s ease-in-out;
  }

  .season-chevron {
    transition: transform 0.2s ease-in-out;
  }
</style>

<script is:inline>
// Global flag to track if event listeners are already bound
let weekCardsInitialized = false

// State management for expanded cards
const STORAGE_KEY = 'week-cards-expanded-state'

// Save expanded state to localStorage
function saveExpandedState(expandedYear, expandedSeasons = []) {
  const state = {
    expandedYear: expandedYear,
    expandedSeasons: expandedSeasons,
    timestamp: Date.now()
  }
  localStorage.setItem(STORAGE_KEY, JSON.stringify(state))
}

// Load expanded state from localStorage
function loadExpandedState() {
  try {
    const saved = localStorage.getItem(STORAGE_KEY)
    if (!saved) return null

    const state = JSON.parse(saved)
    // Only restore state if it's less than 24 hours old
    const oneDayAgo = Date.now() - (24 * 60 * 60 * 1000)
    if (state.timestamp > oneDayAgo) {
      return state
    }
  } catch (error) {
    console.warn('Failed to load week cards expanded state:', error)
  }
  return null
}

// Apply expanded state to DOM
function applyExpandedState(state) {
  if (!state) return

  // Apply expanded year
  if (state.expandedYear) {
    const yearCard = document.querySelector(`.year-card[data-year="${state.expandedYear}"]`)
    if (yearCard) {
      const seasonsContainer = yearCard.querySelector('.seasons-container')
      if (seasonsContainer) {
        seasonsContainer.dataset.expanded = 'true'
        yearCard.dataset.expanded = 'true'
      }
    }
  }

  // Apply expanded seasons
  if (state.expandedSeasons && Array.isArray(state.expandedSeasons)) {
    state.expandedSeasons.forEach(seasonKey => {
      const [year, season] = seasonKey.split('-')
      const seasonCard = document.querySelector(`.year-card[data-year="${year}"] .season-card[data-season="${season}"]`)
      if (seasonCard) {
        const weeksList = seasonCard.querySelector('.weeks-list')
        if (weeksList) {
          weeksList.dataset.expanded = 'true'
          seasonCard.dataset.expanded = 'true'
        }
      }
    })
  }
}

// Initialize event listeners for week cards
function initializeWeekCards() {
  // Check if elements exist before trying to bind events
  const yearHeaders = document.querySelectorAll('.year-card-header')
  const seasonHeaders = document.querySelectorAll('.season-card-header')

  if (yearHeaders.length === 0 && seasonHeaders.length === 0) {
    // Elements don't exist yet, retry after a short delay
    setTimeout(initializeWeekCards, 100)
    return
  }

  // Prevent duplicate initialization
  if (weekCardsInitialized) {
    // Remove existing event listeners safely
    const cleanHeaders = (headers) => {
      headers.forEach(header => {
        // Remove event listeners by cloning the node
        const newHeader = header.cloneNode(true)
        header.parentNode?.replaceChild(newHeader, header)
      })
    }

    cleanHeaders(yearHeaders)
    cleanHeaders(seasonHeaders)
  }

  // Get fresh references after potential cloning
  const freshYearHeaders = document.querySelectorAll('.year-card-header')
  const freshSeasonHeaders = document.querySelectorAll('.season-card-header')

  // Handle year card expansion
  freshYearHeaders.forEach(header => {
    header.addEventListener('click', (e) => {
      e.preventDefault()
      const yearCard = header.closest('.year-card')
      if (!yearCard) return

      const seasonsContainer = yearCard.querySelector('.seasons-container')
      if (!seasonsContainer) return

      const isExpanded = seasonsContainer.dataset.expanded === 'true'

      // Toggle current year
      const newExpandedState = !isExpanded ? 'true' : 'false'
      seasonsContainer.dataset.expanded = newExpandedState
      yearCard.dataset.expanded = newExpandedState

      // Close all other years
      document.querySelectorAll('.year-card').forEach(otherCard => {
        if (otherCard !== yearCard) {
          const otherSeasonsContainer = otherCard.querySelector('.seasons-container')
          if (otherSeasonsContainer) {
            otherSeasonsContainer.dataset.expanded = 'false'
          }
          otherCard.dataset.expanded = 'false'
          // Close all seasons in other years
          otherCard.querySelectorAll('.weeks-list').forEach(weeksList => {
            weeksList.dataset.expanded = 'false'
          })
          otherCard.querySelectorAll('.season-card').forEach(seasonCard => {
            seasonCard.dataset.expanded = 'false'
          })
        }
      })

      // Save state to localStorage
      const year = yearCard.dataset.year
      if (newExpandedState === 'true') {
        // Save expanded year
        saveExpandedState(year)
      } else {
        // Clear saved state when collapsing
        saveExpandedState(null)
      }
    })
  })

  // Handle season card expansion
  freshSeasonHeaders.forEach(header => {
    header.addEventListener('click', (e) => {
      e.preventDefault()
      e.stopPropagation()

      const seasonCard = header.closest('.season-card')
      if (!seasonCard) return

      const weeksList = seasonCard.querySelector('.weeks-list')
      if (!weeksList) return

      const isExpanded = weeksList.dataset.expanded === 'true'

      // Toggle current season
      const newExpandedState = !isExpanded ? 'true' : 'false'
      weeksList.dataset.expanded = newExpandedState
      seasonCard.dataset.expanded = newExpandedState

      // Close all other seasons in the same year
      const parentYearCard = seasonCard.closest('.year-card')
      if (parentYearCard) {
        parentYearCard.querySelectorAll('.season-card').forEach(otherSeason => {
          if (otherSeason !== seasonCard) {
            const otherWeeksList = otherSeason.querySelector('.weeks-list')
            if (otherWeeksList) {
              otherWeeksList.dataset.expanded = 'false'
            }
            otherSeason.dataset.expanded = 'false'
          }
        })
      }

      // Save state to localStorage
      const year = parentYearCard?.dataset.year
      const season = seasonCard.dataset.season
      if (newExpandedState === 'true' && year && season) {
        // Get current expanded seasons
        const currentExpandedSeasons = []
        document.querySelectorAll('.season-card[data-expanded="true"]').forEach(card => {
          const cardYear = card.closest('.year-card')?.dataset.year
          const cardSeason = card.dataset.season
          if (cardYear && cardSeason) {
            currentExpandedSeasons.push(`${cardYear}-${cardSeason}`)
          }
        })

        // Save state with expanded year and seasons
        saveExpandedState(year, currentExpandedSeasons)
      }
    })
  })

  // Restore saved state
  const savedState = loadExpandedState()
  if (savedState) {
    // Apply saved state after a brief delay to ensure elements are ready
    setTimeout(() => {
      applyExpandedState(savedState)
    }, 10)
  }

  // Mark as initialized
  weekCardsInitialized = true
}

// Enhanced initialization with better timing
function safeInitializeWeekCards() {
  // Ensure DOM is ready
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', safeInitializeWeekCards)
    return
  }

  // Add a small delay to ensure all elements are rendered
  setTimeout(initializeWeekCards, 50)
}

// Initialize on first load
safeInitializeWeekCards()

// Re-initialize after Astro page transitions with a small delay to ensure DOM is ready
document.addEventListener('astro:after-swap', () => {
  weekCardsInitialized = false // Reset flag for new page
  setTimeout(safeInitializeWeekCards, 50)
})

// Also initialize when the page becomes visible (handles browser tab switching)
document.addEventListener('visibilitychange', () => {
  if (!document.hidden && !weekCardsInitialized) {
    setTimeout(safeInitializeWeekCards, 100)
  }
})
</script>
